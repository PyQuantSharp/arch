[project]
name = "arch"
readme = "README.md"
license = "NCSA"
license-files = [ "LICENSE.md" ]
dynamic = ["dependencies", "version"]
authors = [{ name = "Kevin Sheppard", email = "kevin.k.sheppard@gmail.com" }]
maintainers = [
  { name = "Kevin Sheppard", email = "kevin.k.sheppard@gmail.com" },
]
description = "ARCH for Python"
requires-python = ">=3.10"
keywords = [
  "arch",
  "ARCH",
  "variance",
  "econometrics",
  "volatility",
  "finance",
  "GARCH",
  "bootstrap",
  "random walk",
  "unit root",
  "Dickey Fuller",
  "time series",
  "confidence intervals",
  "multiple comparisons",
  "Reality Check",
  "SPA",
  "StepM",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Financial and Insurance Industry",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Programming Language :: Cython",
  "Topic :: Scientific/Engineering",
]

[project.urls]
homepage = "https://github.com/bashtage/arch"
documentation = "https://bashtage.github.io/arch/"
repository = "https://github.com/bashtage/arch"
changelog = "https://bashtage.github.io/arch/changes.html"

[build-system]
requires = [
  "setuptools>=61",
  "wheel",
  "setuptools_scm>=9.0.3,<10",
  "cython>=3.0.10",
  "numpy>=2.0.0rc1,<3"
]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.black]
target-version = ['py310', 'py311', 'py312', 'py313']
exclude = '''
(
    \.egg
  | \.git
  | \.mypy_cache
  | \.oytest_cache
  | _build
  | buck-out
  | build
  | dist
)
'''

[tool.setuptools_scm]
write_to = "arch/_version.py"

[tool.ruff]
line-length = 88
fix = false
target-version = "py310"

[tool.ruff.lint]
typing-modules = ["arch.typing"]

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E", "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # flake8-debugger
  "T10",
  # flake8-gettext
  "INT",
  # pylint
  "PL",
  # flake8-pytest-style
  "PT",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # flake8-type-checking
  "TC",
  # comprehensions
  "C4",
  # pygrep-hooks
  "PGH",
  # Ruff-specific rules
  "RUF",
  # flake8-bandit: exec-builtin
  "S102",
  # Perflint
  "PERF",
  # flynt
  "FLY",
  # flake8-future-annotations
  "FA",
  # unconventional-import-alias
  "ICN001",
  # flake8-slots
  "SLOT",
  # flake8-raise
  "RSE"
]

ignore = [
    # Required to allow black formatting
    # Whitespace before ':' (Needed for black)
    "E203",
    # Line too long (### > 88 characters) (Needed for black)
    "E501",
    # Multiple statements on one line (colon) (E701)
    "E701",
    # Always ignore
    # RUF005 Consider `[a, *b]` instead of concatenation - don't like
    "RUF005",
    # TC do not work with doc building
    # Move application import `linearmodels....` into a type-checking block
    "TC001",
    # Move third-party import `...` into a type-checking block
    "TC002",
    # Move standard library import `...` into a type-checking block
    "TC003",

    #  ### Intentionally disabled
    # Too many arguments to function call
    "PLR0913", # 55
    # Too many branches
    "PLR0912", # 14
    # Too many statements
    "PLR0915", # 21
    # Magic number
    "PLR2004",
]

[tool.ruff.lint.per-file-ignores]
# Has function names test for running test suite, not a (pytest) )test
"arch/utility/__init__.py" = ["PT028"]
# Greek letters in comments
"arch/unitroot/_phillips_ouliaris.py" = ["RUF002"]
"arch/unitroot/_engle_granger.py" = ["RUF001"]